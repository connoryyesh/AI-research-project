{"ast":null,"code":"import { getId } from '@aws-amplify/core';\nimport { AuthError } from '../../../errors/AuthError.mjs';\nimport { assertServiceError } from '../../../errors/utils/assertServiceError.mjs';\nimport { getRegionFromIdentityPoolId } from '../../../foundation/parsers/regionParsers.mjs';\nimport { formLoginsMap } from './utils.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n/**\n * Provides a Cognito identityId\n *\n * @param tokens - The AuthTokens received after SignIn\n * @returns string\n * @throws configuration exceptions: `InvalidIdentityPoolIdException`\n *  - Auth errors that may arise from misconfiguration.\n * @throws service exceptions: {@link GetIdException }\n */\nasync function cognitoIdentityIdProvider({\n  tokens,\n  authConfig,\n  identityIdStore\n}) {\n  identityIdStore.setAuthConfig({\n    Cognito: authConfig\n  });\n  // will return null only if there is no identityId cached or if there is an error retrieving it\n  const identityId = await identityIdStore.loadIdentityId();\n  if (identityId) {\n    return identityId.id;\n  }\n  const logins = tokens?.idToken ? formLoginsMap(tokens.idToken.toString()) : {};\n  const generatedIdentityId = await generateIdentityId(logins, authConfig);\n  // Store generated identityId\n  identityIdStore.storeIdentityId({\n    id: generatedIdentityId,\n    type: tokens ? 'primary' : 'guest'\n  });\n  return generatedIdentityId;\n}\nasync function generateIdentityId(logins, authConfig) {\n  const identityPoolId = authConfig?.identityPoolId;\n  const region = getRegionFromIdentityPoolId(identityPoolId);\n  // IdentityId is absent so get it using IdentityPoolId with Cognito's GetId API\n  let idResult;\n  // for a first-time user, this will return a brand new identity\n  // for a returning user, this will retrieve the previous identity assocaited with the logins\n  try {\n    idResult = (await getId({\n      region\n    }, {\n      IdentityPoolId: identityPoolId,\n      Logins: logins\n    })).IdentityId;\n  } catch (e) {\n    assertServiceError(e);\n    throw new AuthError(e);\n  }\n  if (!idResult) {\n    throw new AuthError({\n      name: 'GetIdResponseException',\n      message: 'Received undefined response from getId operation',\n      recoverySuggestion: 'Make sure to pass a valid identityPoolId in the configuration.'\n    });\n  }\n  return idResult;\n}\nexport { cognitoIdentityIdProvider };","map":{"version":3,"names":["cognitoIdentityIdProvider","tokens","authConfig","identityIdStore","setAuthConfig","Cognito","identityId","loadIdentityId","id","logins","idToken","formLoginsMap","toString","generatedIdentityId","generateIdentityId","storeIdentityId","type","identityPoolId","region","getRegionFromIdentityPoolId","idResult","getId","IdentityPoolId","Logins","IdentityId","e","assertServiceError","AuthError","name","message","recoverySuggestion"],"sources":["/Users/varv/Downloads/wf 4/node_modules/@aws-amplify/auth/src/providers/cognito/credentialsProvider/IdentityIdProvider.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { getId } from '@aws-amplify/core';\nimport { AuthError } from '../../../errors/AuthError';\nimport { assertServiceError } from '../../../errors/utils/assertServiceError';\nimport { getRegionFromIdentityPoolId } from '../../../foundation/parsers';\nimport { formLoginsMap } from './utils';\n/**\n * Provides a Cognito identityId\n *\n * @param tokens - The AuthTokens received after SignIn\n * @returns string\n * @throws configuration exceptions: `InvalidIdentityPoolIdException`\n *  - Auth errors that may arise from misconfiguration.\n * @throws service exceptions: {@link GetIdException }\n */\nexport async function cognitoIdentityIdProvider({ tokens, authConfig, identityIdStore, }) {\n    identityIdStore.setAuthConfig({ Cognito: authConfig });\n    // will return null only if there is no identityId cached or if there is an error retrieving it\n    const identityId = await identityIdStore.loadIdentityId();\n    if (identityId) {\n        return identityId.id;\n    }\n    const logins = tokens?.idToken\n        ? formLoginsMap(tokens.idToken.toString())\n        : {};\n    const generatedIdentityId = await generateIdentityId(logins, authConfig);\n    // Store generated identityId\n    identityIdStore.storeIdentityId({\n        id: generatedIdentityId,\n        type: tokens ? 'primary' : 'guest',\n    });\n    return generatedIdentityId;\n}\nasync function generateIdentityId(logins, authConfig) {\n    const identityPoolId = authConfig?.identityPoolId;\n    const region = getRegionFromIdentityPoolId(identityPoolId);\n    // IdentityId is absent so get it using IdentityPoolId with Cognito's GetId API\n    let idResult;\n    // for a first-time user, this will return a brand new identity\n    // for a returning user, this will retrieve the previous identity assocaited with the logins\n    try {\n        idResult = (await getId({\n            region,\n        }, {\n            IdentityPoolId: identityPoolId,\n            Logins: logins,\n        })).IdentityId;\n    }\n    catch (e) {\n        assertServiceError(e);\n        throw new AuthError(e);\n    }\n    if (!idResult) {\n        throw new AuthError({\n            name: 'GetIdResponseException',\n            message: 'Received undefined response from getId operation',\n            recoverySuggestion: 'Make sure to pass a valid identityPoolId in the configuration.',\n        });\n    }\n    return idResult;\n}\n"],"mappings":";;;;;;AAAA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,eAAeA,yBAAyBA,CAAC;EAAEC,MAAM;EAAEC,UAAU;EAAEC;AAAe,CAAG,EAAE;EACtFA,eAAe,CAACC,aAAa,CAAC;IAAEC,OAAO,EAAEH;EAAU,CAAE,CAAC;EAC1D;EACI,MAAMI,UAAU,GAAG,MAAMH,eAAe,CAACI,cAAc,EAAE;EACzD,IAAID,UAAU,EAAE;IACZ,OAAOA,UAAU,CAACE,EAAE;EAC5B;EACI,MAAMC,MAAM,GAAGR,MAAM,EAAES,OAAA,GACjBC,aAAa,CAACV,MAAM,CAACS,OAAO,CAACE,QAAQ,EAAE,IACvC,EAAE;EACR,MAAMC,mBAAmB,GAAG,MAAMC,kBAAkB,CAACL,MAAM,EAAEP,UAAU,CAAC;EAC5E;EACIC,eAAe,CAACY,eAAe,CAAC;IAC5BP,EAAE,EAAEK,mBAAmB;IACvBG,IAAI,EAAEf,MAAM,GAAG,SAAS,GAAG;EACnC,CAAK,CAAC;EACF,OAAOY,mBAAmB;AAC9B;AACA,eAAeC,kBAAkBA,CAACL,MAAM,EAAEP,UAAU,EAAE;EAClD,MAAMe,cAAc,GAAGf,UAAU,EAAEe,cAAc;EACjD,MAAMC,MAAM,GAAGC,2BAA2B,CAACF,cAAc,CAAC;EAC9D;EACI,IAAIG,QAAQ;EAChB;EACA;EACI,IAAI;IACAA,QAAQ,GAAG,CAAC,MAAMC,KAAK,CAAC;MACpBH;IACZ,CAAS,EAAE;MACCI,cAAc,EAAEL,cAAc;MAC9BM,MAAM,EAAEd;IACpB,CAAS,CAAC,EAAEe,UAAU;EACtB,EACI,OAAOC,CAAC,EAAE;IACNC,kBAAkB,CAACD,CAAC,CAAC;IACrB,MAAM,IAAIE,SAAS,CAACF,CAAC,CAAC;EAC9B;EACI,IAAI,CAACL,QAAQ,EAAE;IACX,MAAM,IAAIO,SAAS,CAAC;MAChBC,IAAI,EAAE,wBAAwB;MAC9BC,OAAO,EAAE,kDAAkD;MAC3DC,kBAAkB,EAAE;IAChC,CAAS,CAAC;EACV;EACI,OAAOV,QAAQ;AACnB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}