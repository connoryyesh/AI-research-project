{"ast":null,"code":"import { AmplifyUrl, USER_AGENT_HEADER, urlSafeDecode, AMPLIFY_SYMBOL } from '@aws-amplify/core/internals/utils';\nimport { decodeJWT, Hub } from '@aws-amplify/core';\nimport { cacheCognitoTokens } from '../../tokenProvider/cacheTokens.mjs';\nimport { dispatchSignedInHubEvent } from '../dispatchSignedInHubEvent.mjs';\nimport '../refreshAuthTokens.mjs';\nimport '../../tokenProvider/errorHelpers.mjs';\nimport { oAuthStore } from './oAuthStore.mjs';\nimport { resolveAndClearInflightPromises } from './inflightPromise.mjs';\nimport { tokenOrchestrator } from '../../tokenProvider/tokenProvider.mjs';\nimport { createOAuthError } from './createOAuthError.mjs';\nimport { validateState } from './validateState.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nconst completeOAuthFlow = async _ref => {\n  let {\n    currentUrl,\n    userAgentValue,\n    clientId,\n    redirectUri,\n    responseType,\n    domain,\n    preferPrivateSession\n  } = _ref;\n  const urlParams = new AmplifyUrl(currentUrl);\n  const error = urlParams.searchParams.get('error');\n  const errorMessage = urlParams.searchParams.get('error_description');\n  if (error) {\n    throw createOAuthError(errorMessage ?? error);\n  }\n  if (responseType === 'code') {\n    return handleCodeFlow({\n      currentUrl,\n      userAgentValue,\n      clientId,\n      redirectUri,\n      domain,\n      preferPrivateSession\n    });\n  }\n  return handleImplicitFlow({\n    currentUrl,\n    redirectUri,\n    preferPrivateSession\n  });\n};\nconst handleCodeFlow = async _ref2 => {\n  let {\n    currentUrl,\n    userAgentValue,\n    clientId,\n    redirectUri,\n    domain,\n    preferPrivateSession\n  } = _ref2;\n  /* Convert URL into an object with parameters as keys\n  { redirect_uri: 'http://localhost:3000/', response_type: 'code', ...} */\n  const url = new AmplifyUrl(currentUrl);\n  const code = url.searchParams.get('code');\n  const state = url.searchParams.get('state');\n  // if `code` or `state` is not presented in the redirect url, most likely\n  // that the end user cancelled the inflight oauth flow by:\n  // 1. clicking the back button of browser\n  // 2. closing the provider hosted UI page and coming back to the app\n  if (!code || !state) {\n    throw createOAuthError('User cancelled OAuth flow.');\n  }\n  // may throw error is being caught in attemptCompleteOAuthFlow.ts\n  const validatedState = await validateState(state);\n  const oAuthTokenEndpoint = 'https://' + domain + '/oauth2/token';\n  // TODO(v6): check hub events\n  // dispatchAuthEvent(\n  // \t'codeFlow',\n  // \t{},\n  // \t`Retrieving tokens from ${oAuthTokenEndpoint}`\n  // );\n  const codeVerifier = await oAuthStore.loadPKCE();\n  const oAuthTokenBody = {\n    grant_type: 'authorization_code',\n    code,\n    client_id: clientId,\n    redirect_uri: redirectUri,\n    ...(codeVerifier ? {\n      code_verifier: codeVerifier\n    } : {})\n  };\n  const body = Object.entries(oAuthTokenBody).map(_ref3 => {\n    let [k, v] = _ref3;\n    return `${encodeURIComponent(k)}=${encodeURIComponent(v)}`;\n  }).join('&');\n  const {\n    access_token,\n    refresh_token: refreshToken,\n    id_token,\n    error,\n    error_message: errorMessage,\n    token_type,\n    expires_in\n  } = await (await fetch(oAuthTokenEndpoint, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded',\n      [USER_AGENT_HEADER]: userAgentValue\n    },\n    body\n  })).json();\n  if (error) {\n    // error is being caught in attemptCompleteOAuthFlow.ts\n    throw createOAuthError(errorMessage ?? error);\n  }\n  const username = (access_token && decodeJWT(access_token).payload.username) ?? 'username';\n  await cacheCognitoTokens({\n    username,\n    AccessToken: access_token,\n    IdToken: id_token,\n    RefreshToken: refreshToken\n  });\n  return completeFlow({\n    redirectUri,\n    state: validatedState,\n    preferPrivateSession\n  });\n};\nconst handleImplicitFlow = async _ref4 => {\n  let {\n    currentUrl,\n    redirectUri,\n    preferPrivateSession\n  } = _ref4;\n  // hash is `null` if `#` doesn't exist on URL\n  const url = new AmplifyUrl(currentUrl);\n  const {\n    id_token,\n    access_token,\n    state,\n    token_type,\n    expires_in,\n    error_description,\n    error\n  } = (url.hash ?? '#').substring(1) // Remove # from returned code\n  .split('&').map(pairings => pairings.split('=')).reduce((accum, _ref5) => {\n    let [k, v] = _ref5;\n    return {\n      ...accum,\n      [k]: v\n    };\n  }, {\n    id_token: undefined,\n    access_token: undefined,\n    state: undefined,\n    token_type: undefined,\n    expires_in: undefined,\n    error_description: undefined,\n    error: undefined\n  });\n  if (error) {\n    throw createOAuthError(error_description ?? error);\n  }\n  if (!access_token) {\n    // error is being caught in attemptCompleteOAuthFlow.ts\n    throw createOAuthError('No access token returned from OAuth flow.');\n  }\n  const validatedState = await validateState(state);\n  const username = (access_token && decodeJWT(access_token).payload.username) ?? 'username';\n  await cacheCognitoTokens({\n    username,\n    AccessToken: access_token,\n    IdToken: id_token\n  });\n  return completeFlow({\n    redirectUri,\n    state: validatedState,\n    preferPrivateSession\n  });\n};\nconst completeFlow = async _ref6 => {\n  let {\n    redirectUri,\n    state,\n    preferPrivateSession\n  } = _ref6;\n  await tokenOrchestrator.setOAuthMetadata({\n    oauthSignIn: true\n  });\n  await oAuthStore.clearOAuthData();\n  await oAuthStore.storeOAuthSignIn(true, preferPrivateSession);\n  // this should be called before any call that involves `fetchAuthSession`\n  // e.g. `getCurrentUser()` below, so it allows every inflight async calls to\n  //  `fetchAuthSession` can be resolved\n  resolveAndClearInflightPromises();\n  // clear history before sending out final Hub events\n  clearHistory(redirectUri);\n  if (isCustomState(state)) {\n    Hub.dispatch('auth', {\n      event: 'customOAuthState',\n      data: urlSafeDecode(getCustomState(state))\n    }, 'Auth', AMPLIFY_SYMBOL);\n  }\n  Hub.dispatch('auth', {\n    event: 'signInWithRedirect'\n  }, 'Auth', AMPLIFY_SYMBOL);\n  await dispatchSignedInHubEvent();\n};\nconst isCustomState = state => {\n  return /-/.test(state);\n};\nconst getCustomState = state => {\n  return state.split('-').splice(1).join('-');\n};\nconst clearHistory = redirectUri => {\n  if (typeof window !== 'undefined' && typeof window.history !== 'undefined') {\n    window.history.replaceState(window.history.state, '', redirectUri);\n  }\n};\nexport { completeOAuthFlow };","map":{"version":3,"names":["completeOAuthFlow","_ref","currentUrl","userAgentValue","clientId","redirectUri","responseType","domain","preferPrivateSession","urlParams","AmplifyUrl","error","searchParams","get","errorMessage","createOAuthError","handleCodeFlow","handleImplicitFlow","_ref2","url","code","state","validatedState","validateState","oAuthTokenEndpoint","codeVerifier","oAuthStore","loadPKCE","oAuthTokenBody","grant_type","client_id","redirect_uri","code_verifier","body","Object","entries","map","_ref3","k","v","encodeURIComponent","join","access_token","refresh_token","refreshToken","id_token","error_message","token_type","expires_in","fetch","method","headers","USER_AGENT_HEADER","json","username","decodeJWT","payload","cacheCognitoTokens","AccessToken","IdToken","RefreshToken","completeFlow","_ref4","error_description","hash","substring","split","pairings","reduce","accum","_ref5","undefined","_ref6","tokenOrchestrator","setOAuthMetadata","oauthSignIn","clearOAuthData","storeOAuthSignIn","resolveAndClearInflightPromises","clearHistory","isCustomState","Hub","dispatch","event","data","urlSafeDecode","getCustomState","AMPLIFY_SYMBOL","dispatchSignedInHubEvent","test","splice","window","history","replaceState"],"sources":["/Users/varv/Downloads/CONNORR1/node_modules/aws-amplify/node_modules/@aws-amplify/auth/src/providers/cognito/utils/oauth/completeOAuthFlow.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { AMPLIFY_SYMBOL, AmplifyUrl, USER_AGENT_HEADER, urlSafeDecode, } from '@aws-amplify/core/internals/utils';\nimport { Hub, decodeJWT } from '@aws-amplify/core';\nimport { cacheCognitoTokens } from '../../tokenProvider/cacheTokens';\nimport { dispatchSignedInHubEvent } from '../dispatchSignedInHubEvent';\nimport { tokenOrchestrator } from '../../tokenProvider';\nimport { createOAuthError } from './createOAuthError';\nimport { resolveAndClearInflightPromises } from './inflightPromise';\nimport { validateState } from './validateState';\nimport { oAuthStore } from './oAuthStore';\nexport const completeOAuthFlow = async ({ currentUrl, userAgentValue, clientId, redirectUri, responseType, domain, preferPrivateSession, }) => {\n    const urlParams = new AmplifyUrl(currentUrl);\n    const error = urlParams.searchParams.get('error');\n    const errorMessage = urlParams.searchParams.get('error_description');\n    if (error) {\n        throw createOAuthError(errorMessage ?? error);\n    }\n    if (responseType === 'code') {\n        return handleCodeFlow({\n            currentUrl,\n            userAgentValue,\n            clientId,\n            redirectUri,\n            domain,\n            preferPrivateSession,\n        });\n    }\n    return handleImplicitFlow({\n        currentUrl,\n        redirectUri,\n        preferPrivateSession,\n    });\n};\nconst handleCodeFlow = async ({ currentUrl, userAgentValue, clientId, redirectUri, domain, preferPrivateSession, }) => {\n    /* Convert URL into an object with parameters as keys\n{ redirect_uri: 'http://localhost:3000/', response_type: 'code', ...} */\n    const url = new AmplifyUrl(currentUrl);\n    const code = url.searchParams.get('code');\n    const state = url.searchParams.get('state');\n    // if `code` or `state` is not presented in the redirect url, most likely\n    // that the end user cancelled the inflight oauth flow by:\n    // 1. clicking the back button of browser\n    // 2. closing the provider hosted UI page and coming back to the app\n    if (!code || !state) {\n        throw createOAuthError('User cancelled OAuth flow.');\n    }\n    // may throw error is being caught in attemptCompleteOAuthFlow.ts\n    const validatedState = await validateState(state);\n    const oAuthTokenEndpoint = 'https://' + domain + '/oauth2/token';\n    // TODO(v6): check hub events\n    // dispatchAuthEvent(\n    // \t'codeFlow',\n    // \t{},\n    // \t`Retrieving tokens from ${oAuthTokenEndpoint}`\n    // );\n    const codeVerifier = await oAuthStore.loadPKCE();\n    const oAuthTokenBody = {\n        grant_type: 'authorization_code',\n        code,\n        client_id: clientId,\n        redirect_uri: redirectUri,\n        ...(codeVerifier ? { code_verifier: codeVerifier } : {}),\n    };\n    const body = Object.entries(oAuthTokenBody)\n        .map(([k, v]) => `${encodeURIComponent(k)}=${encodeURIComponent(v)}`)\n        .join('&');\n    const { access_token, refresh_token: refreshToken, id_token, error, error_message: errorMessage, token_type, expires_in, } = await (await fetch(oAuthTokenEndpoint, {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/x-www-form-urlencoded',\n            [USER_AGENT_HEADER]: userAgentValue,\n        },\n        body,\n    })).json();\n    if (error) {\n        // error is being caught in attemptCompleteOAuthFlow.ts\n        throw createOAuthError(errorMessage ?? error);\n    }\n    const username = (access_token && decodeJWT(access_token).payload.username) ?? 'username';\n    await cacheCognitoTokens({\n        username,\n        AccessToken: access_token,\n        IdToken: id_token,\n        RefreshToken: refreshToken,\n        TokenType: token_type,\n        ExpiresIn: expires_in,\n    });\n    return completeFlow({\n        redirectUri,\n        state: validatedState,\n        preferPrivateSession,\n    });\n};\nconst handleImplicitFlow = async ({ currentUrl, redirectUri, preferPrivateSession, }) => {\n    // hash is `null` if `#` doesn't exist on URL\n    const url = new AmplifyUrl(currentUrl);\n    const { id_token, access_token, state, token_type, expires_in, error_description, error, } = (url.hash ?? '#')\n        .substring(1) // Remove # from returned code\n        .split('&')\n        .map(pairings => pairings.split('='))\n        .reduce((accum, [k, v]) => ({ ...accum, [k]: v }), {\n        id_token: undefined,\n        access_token: undefined,\n        state: undefined,\n        token_type: undefined,\n        expires_in: undefined,\n        error_description: undefined,\n        error: undefined,\n    });\n    if (error) {\n        throw createOAuthError(error_description ?? error);\n    }\n    if (!access_token) {\n        // error is being caught in attemptCompleteOAuthFlow.ts\n        throw createOAuthError('No access token returned from OAuth flow.');\n    }\n    const validatedState = await validateState(state);\n    const username = (access_token && decodeJWT(access_token).payload.username) ?? 'username';\n    await cacheCognitoTokens({\n        username,\n        AccessToken: access_token,\n        IdToken: id_token,\n        TokenType: token_type,\n        ExpiresIn: expires_in,\n    });\n    return completeFlow({\n        redirectUri,\n        state: validatedState,\n        preferPrivateSession,\n    });\n};\nconst completeFlow = async ({ redirectUri, state, preferPrivateSession, }) => {\n    await tokenOrchestrator.setOAuthMetadata({\n        oauthSignIn: true,\n    });\n    await oAuthStore.clearOAuthData();\n    await oAuthStore.storeOAuthSignIn(true, preferPrivateSession);\n    // this should be called before any call that involves `fetchAuthSession`\n    // e.g. `getCurrentUser()` below, so it allows every inflight async calls to\n    //  `fetchAuthSession` can be resolved\n    resolveAndClearInflightPromises();\n    // clear history before sending out final Hub events\n    clearHistory(redirectUri);\n    if (isCustomState(state)) {\n        Hub.dispatch('auth', {\n            event: 'customOAuthState',\n            data: urlSafeDecode(getCustomState(state)),\n        }, 'Auth', AMPLIFY_SYMBOL);\n    }\n    Hub.dispatch('auth', { event: 'signInWithRedirect' }, 'Auth', AMPLIFY_SYMBOL);\n    await dispatchSignedInHubEvent();\n};\nconst isCustomState = (state) => {\n    return /-/.test(state);\n};\nconst getCustomState = (state) => {\n    return state.split('-').splice(1).join('-');\n};\nconst clearHistory = (redirectUri) => {\n    if (typeof window !== 'undefined' && typeof window.history !== 'undefined') {\n        window.history.replaceState(window.history.state, '', redirectUri);\n    }\n};\n"],"mappings":";;;;;;;;;;;;AAAA;AACA;AAUY,MAACA,iBAAiB,GAAG,MAAAC,IAAA,IAA8G;EAAA,IAAvG;IAAEC,UAAU;IAAEC,cAAc;IAAEC,QAAQ;IAAEC,WAAW;IAAEC,YAAY;IAAEC,MAAM;IAAEC;EAAoB,CAAG,GAAAP,IAAA;EACtI,MAAMQ,SAAS,GAAG,IAAIC,UAAU,CAACR,UAAU,CAAC;EAC5C,MAAMS,KAAK,GAAGF,SAAS,CAACG,YAAY,CAACC,GAAG,CAAC,OAAO,CAAC;EACjD,MAAMC,YAAY,GAAGL,SAAS,CAACG,YAAY,CAACC,GAAG,CAAC,mBAAmB,CAAC;EACpE,IAAIF,KAAK,EAAE;IACP,MAAMI,gBAAgB,CAACD,YAAY,IAAIH,KAAK,CAAC;EACrD;EACI,IAAIL,YAAY,KAAK,MAAM,EAAE;IACzB,OAAOU,cAAc,CAAC;MAClBd,UAAU;MACVC,cAAc;MACdC,QAAQ;MACRC,WAAW;MACXE,MAAM;MACNC;IACZ,CAAS,CAAC;EACV;EACI,OAAOS,kBAAkB,CAAC;IACtBf,UAAU;IACVG,WAAW;IACXG;EACR,CAAK,CAAC;AACN;AACA,MAAMQ,cAAc,GAAG,MAAAE,KAAA,IAAgG;EAAA,IAAzF;IAAEhB,UAAU;IAAEC,cAAc;IAAEC,QAAQ;IAAEC,WAAW;IAAEE,MAAM;IAAEC;EAAoB,CAAG,GAAAU,KAAA;EAClH;AACA;EACI,MAAMC,GAAG,GAAG,IAAIT,UAAU,CAACR,UAAU,CAAC;EACtC,MAAMkB,IAAI,GAAGD,GAAG,CAACP,YAAY,CAACC,GAAG,CAAC,MAAM,CAAC;EACzC,MAAMQ,KAAK,GAAGF,GAAG,CAACP,YAAY,CAACC,GAAG,CAAC,OAAO,CAAC;EAC/C;EACA;EACA;EACA;EACI,IAAI,CAACO,IAAI,IAAI,CAACC,KAAK,EAAE;IACjB,MAAMN,gBAAgB,CAAC,4BAA4B,CAAC;EAC5D;EACA;EACI,MAAMO,cAAc,GAAG,MAAMC,aAAa,CAACF,KAAK,CAAC;EACjD,MAAMG,kBAAkB,GAAG,UAAU,GAAGjB,MAAM,GAAG,eAAe;EACpE;EACA;EACA;EACA;EACA;EACA;EACI,MAAMkB,YAAY,GAAG,MAAMC,UAAU,CAACC,QAAQ,EAAE;EAChD,MAAMC,cAAc,GAAG;IACnBC,UAAU,EAAE,oBAAoB;IAChCT,IAAI;IACJU,SAAS,EAAE1B,QAAQ;IACnB2B,YAAY,EAAE1B,WAAW;IACzB,IAAIoB,YAAY,GAAG;MAAEO,aAAa,EAAEP;IAAY,CAAE,GAAG,EAAE;EAC/D,CAAK;EACD,MAAMQ,IAAI,GAAGC,MAAM,CAACC,OAAO,CAACP,cAAc,EACrCQ,GAAG,CAACC,KAAA;IAAA,IAAC,CAACC,CAAC,EAAEC,CAAC,CAAC,GAAAF,KAAA;IAAA,OAAK,GAAGG,kBAAkB,CAACF,CAAC,CAAC,IAAIE,kBAAkB,CAACD,CAAC,CAAC,EAAE;EAAA,GACnEE,IAAI,CAAC,GAAG,CAAC;EACd,MAAM;IAAEC,YAAY;IAAEC,aAAa,EAAEC,YAAY;IAAEC,QAAQ;IAAElC,KAAK;IAAEmC,aAAa,EAAEhC,YAAY;IAAEiC,UAAU;IAAEC;EAAU,CAAG,GAAG,MAAM,CAAC,MAAMC,KAAK,CAACzB,kBAAkB,EAAE;IAChK0B,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACL,cAAc,EAAE,mCAAmC;MACnD,CAACC,iBAAiB,GAAGjD;IACjC,CAAS;IACD8B;EACR,CAAK,CAAC,EAAEoB,IAAI,EAAE;EACV,IAAI1C,KAAK,EAAE;IACf;IACQ,MAAMI,gBAAgB,CAACD,YAAY,IAAIH,KAAK,CAAC;EACrD;EACI,MAAM2C,QAAQ,GAAG,CAACZ,YAAY,IAAIa,SAAS,CAACb,YAAY,CAAC,CAACc,OAAO,CAACF,QAAQ,KAAK,UAAU;EACzF,MAAMG,kBAAkB,CAAC;IACrBH,QAAQ;IACRI,WAAW,EAAEhB,YAAY;IACzBiB,OAAO,EAAEd,QAAQ;IACjBe,YAAY,EAAEhB;EAGlB,CAAC,CAAC;EACF,OAAOiB,YAAY,CAAC;IAChBxD,WAAW;IACXgB,KAAK,EAAEC,cAAc;IACrBd;EACR,CAAK,CAAC;AACN,CAAC;AACD,MAAMS,kBAAkB,GAAG,MAAA6C,KAAA,IAA8D;EAAA,IAAvD;IAAE5D,UAAU;IAAEG,WAAW;IAAEG;EAAoB,CAAG,GAAAsD,KAAA;EACpF;EACI,MAAM3C,GAAG,GAAG,IAAIT,UAAU,CAACR,UAAU,CAAC;EACtC,MAAM;IAAE2C,QAAQ;IAAEH,YAAY;IAAErB,KAAK;IAAE0B,UAAU;IAAEC,UAAU;IAAEe,iBAAiB;IAAEpD;EAAK,CAAG,GAAG,CAACQ,GAAG,CAAC6C,IAAI,IAAI,GAAG,EACxGC,SAAS,CAAC,CAAC,CAAC;EAAA,CACZC,KAAK,CAAC,GAAG,EACT9B,GAAG,CAAC+B,QAAQ,IAAIA,QAAQ,CAACD,KAAK,CAAC,GAAG,CAAC,EACnCE,MAAM,CAAC,CAACC,KAAK,EAAAC,KAAA;IAAA,IAAE,CAAChC,CAAC,EAAEC,CAAC,CAAC,GAAA+B,KAAA;IAAA,OAAM;MAAE,GAAGD,KAAK;MAAE,CAAC/B,CAAC,GAAGC;IAAC,CAAE;EAAA,CAAC,EAAE;IACnDM,QAAQ,EAAE0B,SAAS;IACnB7B,YAAY,EAAE6B,SAAS;IACvBlD,KAAK,EAAEkD,SAAS;IAChBxB,UAAU,EAAEwB,SAAS;IACrBvB,UAAU,EAAEuB,SAAS;IACrBR,iBAAiB,EAAEQ,SAAS;IAC5B5D,KAAK,EAAE4D;EACf,CAAK,CAAC;EACF,IAAI5D,KAAK,EAAE;IACP,MAAMI,gBAAgB,CAACgD,iBAAiB,IAAIpD,KAAK,CAAC;EAC1D;EACI,IAAI,CAAC+B,YAAY,EAAE;IACvB;IACQ,MAAM3B,gBAAgB,CAAC,2CAA2C,CAAC;EAC3E;EACI,MAAMO,cAAc,GAAG,MAAMC,aAAa,CAACF,KAAK,CAAC;EACjD,MAAMiC,QAAQ,GAAG,CAACZ,YAAY,IAAIa,SAAS,CAACb,YAAY,CAAC,CAACc,OAAO,CAACF,QAAQ,KAAK,UAAU;EACzF,MAAMG,kBAAkB,CAAC;IACrBH,QAAQ;IACRI,WAAW,EAAEhB,YAAY;IACzBiB,OAAO,EAAEd;EAGb,CAAC,CAAC;EACF,OAAOgB,YAAY,CAAC;IAChBxD,WAAW;IACXgB,KAAK,EAAEC,cAAc;IACrBd;EACR,CAAK,CAAC;AACN,CAAC;AACD,MAAMqD,YAAY,GAAG,MAAAW,KAAA,IAAyD;EAAA,IAAlD;IAAEnE,WAAW;IAAEgB,KAAK;IAAEb;EAAoB,CAAG,GAAAgE,KAAA;EACrE,MAAMC,iBAAiB,CAACC,gBAAgB,CAAC;IACrCC,WAAW,EAAE;EACrB,CAAK,CAAC;EACF,MAAMjD,UAAU,CAACkD,cAAc,EAAE;EACjC,MAAMlD,UAAU,CAACmD,gBAAgB,CAAC,IAAI,EAAErE,oBAAoB,CAAC;EACjE;EACA;EACA;EACIsE,+BAA+B,EAAE;EACrC;EACIC,YAAY,CAAC1E,WAAW,CAAC;EACzB,IAAI2E,aAAa,CAAC3D,KAAK,CAAC,EAAE;IACtB4D,GAAG,CAACC,QAAQ,CAAC,MAAM,EAAE;MACjBC,KAAK,EAAE,kBAAkB;MACzBC,IAAI,EAAEC,aAAa,CAACC,cAAc,CAACjE,KAAK,CAAC;IACrD,CAAS,EAAE,MAAM,EAAEkE,cAAc,CAAC;EAClC;EACIN,GAAG,CAACC,QAAQ,CAAC,MAAM,EAAE;IAAEC,KAAK,EAAE;EAAoB,CAAE,EAAE,MAAM,EAAEI,cAAc,CAAC;EAC7E,MAAMC,wBAAwB,EAAE;AACpC,CAAC;AACD,MAAMR,aAAa,GAAI3D,KAAK,IAAK;EAC7B,OAAO,GAAG,CAACoE,IAAI,CAACpE,KAAK,CAAC;AAC1B,CAAC;AACD,MAAMiE,cAAc,GAAIjE,KAAK,IAAK;EAC9B,OAAOA,KAAK,CAAC6C,KAAK,CAAC,GAAG,CAAC,CAACwB,MAAM,CAAC,CAAC,CAAC,CAACjD,IAAI,CAAC,GAAG,CAAC;AAC/C,CAAC;AACD,MAAMsC,YAAY,GAAI1E,WAAW,IAAK;EAClC,IAAI,OAAOsF,MAAM,KAAK,WAAW,IAAI,OAAOA,MAAM,CAACC,OAAO,KAAK,WAAW,EAAE;IACxED,MAAM,CAACC,OAAO,CAACC,YAAY,CAACF,MAAM,CAACC,OAAO,CAACvE,KAAK,EAAE,EAAE,EAAEhB,WAAW,CAAC;EAC1E;AACA,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}