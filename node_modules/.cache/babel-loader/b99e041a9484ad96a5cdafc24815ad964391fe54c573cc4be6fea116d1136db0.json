{"ast":null,"code":"import { ConsoleLogger, getCredentialsForIdentity } from '@aws-amplify/core';\nimport { assertIdentityPoolIdConfig } from '@aws-amplify/core/internals/utils';\nimport { AuthError } from '../../../errors/AuthError.mjs';\nimport { assertServiceError } from '../../../errors/utils/assertServiceError.mjs';\nimport { getRegionFromIdentityPoolId } from '../../../foundation/parsers/regionParsers.mjs';\nimport { assertIdTokenInAuthTokens } from '../utils/types.mjs';\nimport { cognitoIdentityIdProvider } from './IdentityIdProvider.mjs';\nimport { formLoginsMap } from './utils.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nconst logger = new ConsoleLogger('CognitoCredentialsProvider');\nconst CREDENTIALS_TTL = 50 * 60 * 1000; // 50 min, can be modified on config if required in the future\nclass CognitoAWSCredentialsAndIdentityIdProvider {\n  constructor(identityIdStore) {\n    this._nextCredentialsRefresh = 0;\n    this._identityIdStore = identityIdStore;\n  }\n  async clearCredentialsAndIdentityId() {\n    logger.debug('Clearing out credentials and identityId');\n    this._credentialsAndIdentityId = undefined;\n    await this._identityIdStore.clearIdentityId();\n  }\n  async clearCredentials() {\n    logger.debug('Clearing out in-memory credentials');\n    this._credentialsAndIdentityId = undefined;\n  }\n  async getCredentialsAndIdentityId(getCredentialsOptions) {\n    const isAuthenticated = getCredentialsOptions.authenticated;\n    const {\n      tokens\n    } = getCredentialsOptions;\n    const {\n      authConfig\n    } = getCredentialsOptions;\n    try {\n      assertIdentityPoolIdConfig(authConfig?.Cognito);\n    } catch {\n      // No identity pool configured, skipping\n      return;\n    }\n    if (!isAuthenticated && !authConfig.Cognito.allowGuestAccess) {\n      // TODO(V6): return partial result like Native platforms\n      return;\n    }\n    const {\n      forceRefresh\n    } = getCredentialsOptions;\n    const tokenHasChanged = this.hasTokenChanged(tokens);\n    const identityId = await cognitoIdentityIdProvider({\n      tokens,\n      authConfig: authConfig.Cognito,\n      identityIdStore: this._identityIdStore\n    });\n    // Clear cached credentials when forceRefresh is true OR the cache token has changed\n    if (forceRefresh || tokenHasChanged) {\n      this.clearCredentials();\n    }\n    if (!isAuthenticated) {\n      return this.getGuestCredentials(identityId, authConfig.Cognito);\n    } else {\n      assertIdTokenInAuthTokens(tokens);\n      return this.credsForOIDCTokens(authConfig.Cognito, tokens, identityId);\n    }\n  }\n  async getGuestCredentials(identityId, authConfig) {\n    // Return existing in-memory cached credentials only if it exists, is not past it's lifetime and is unauthenticated credentials\n    if (this._credentialsAndIdentityId && !this.isPastTTL() && this._credentialsAndIdentityId.isAuthenticatedCreds === false) {\n      logger.info('returning stored credentials as they neither past TTL nor expired.');\n      return this._credentialsAndIdentityId;\n    }\n    // Clear to discard if any authenticated credentials are set and start with a clean slate\n    this.clearCredentials();\n    const region = getRegionFromIdentityPoolId(authConfig.identityPoolId);\n    // use identityId to obtain guest credentials\n    // save credentials in-memory\n    // No logins params should be passed for guest creds:\n    // https://docs.aws.amazon.com/cognitoidentity/latest/APIReference/API_GetCredentialsForIdentity.html\n    let clientResult;\n    try {\n      clientResult = await getCredentialsForIdentity({\n        region\n      }, {\n        IdentityId: identityId\n      });\n    } catch (e) {\n      assertServiceError(e);\n      throw new AuthError(e);\n    }\n    if (clientResult?.Credentials?.AccessKeyId && clientResult?.Credentials?.SecretKey) {\n      this._nextCredentialsRefresh = new Date().getTime() + CREDENTIALS_TTL;\n      const res = {\n        credentials: {\n          accessKeyId: clientResult.Credentials.AccessKeyId,\n          secretAccessKey: clientResult.Credentials.SecretKey,\n          sessionToken: clientResult.Credentials.SessionToken,\n          expiration: clientResult.Credentials.Expiration\n        },\n        identityId\n      };\n      if (clientResult.IdentityId) {\n        res.identityId = clientResult.IdentityId;\n        this._identityIdStore.storeIdentityId({\n          id: clientResult.IdentityId,\n          type: 'guest'\n        });\n      }\n      this._credentialsAndIdentityId = {\n        ...res,\n        isAuthenticatedCreds: false\n      };\n      return res;\n    } else {\n      throw new AuthError({\n        name: 'CredentialsNotFoundException',\n        message: `Cognito did not respond with either Credentials, AccessKeyId or SecretKey.`\n      });\n    }\n  }\n  async credsForOIDCTokens(authConfig, authTokens, identityId) {\n    if (this._credentialsAndIdentityId && !this.isPastTTL() && this._credentialsAndIdentityId.isAuthenticatedCreds === true) {\n      logger.debug('returning stored credentials as they neither past TTL nor expired.');\n      return this._credentialsAndIdentityId;\n    }\n    // Clear to discard if any unauthenticated credentials are set and start with a clean slate\n    this.clearCredentials();\n    const logins = authTokens.idToken ? formLoginsMap(authTokens.idToken.toString()) : {};\n    const region = getRegionFromIdentityPoolId(authConfig.identityPoolId);\n    let clientResult;\n    try {\n      clientResult = await getCredentialsForIdentity({\n        region\n      }, {\n        IdentityId: identityId,\n        Logins: logins\n      });\n    } catch (e) {\n      assertServiceError(e);\n      throw new AuthError(e);\n    }\n    if (clientResult?.Credentials?.AccessKeyId && clientResult?.Credentials?.SecretKey) {\n      this._nextCredentialsRefresh = new Date().getTime() + CREDENTIALS_TTL;\n      const res = {\n        credentials: {\n          accessKeyId: clientResult.Credentials.AccessKeyId,\n          secretAccessKey: clientResult.Credentials.SecretKey,\n          sessionToken: clientResult.Credentials.SessionToken,\n          expiration: clientResult.Credentials.Expiration\n        },\n        identityId\n      };\n      if (clientResult.IdentityId) {\n        res.identityId = clientResult.IdentityId;\n        // note: the following call removes guest identityId from the persistent store (localStorage)\n        this._identityIdStore.storeIdentityId({\n          id: clientResult.IdentityId,\n          type: 'primary'\n        });\n      }\n      // Store the credentials in-memory along with the expiration\n      this._credentialsAndIdentityId = {\n        ...res,\n        isAuthenticatedCreds: true,\n        associatedIdToken: authTokens.idToken?.toString()\n      };\n      return res;\n    } else {\n      throw new AuthError({\n        name: 'CredentialsException',\n        message: `Cognito did not respond with either Credentials, AccessKeyId or SecretKey.`\n      });\n    }\n  }\n  isPastTTL() {\n    return this._nextCredentialsRefresh === undefined ? true : this._nextCredentialsRefresh <= Date.now();\n  }\n  hasTokenChanged(tokens) {\n    return !!tokens && !!this._credentialsAndIdentityId?.associatedIdToken && tokens.idToken?.toString() !== this._credentialsAndIdentityId.associatedIdToken;\n  }\n}\nexport { CognitoAWSCredentialsAndIdentityIdProvider };","map":{"version":3,"names":["logger","ConsoleLogger","CREDENTIALS_TTL","CognitoAWSCredentialsAndIdentityIdProvider","constructor","identityIdStore","_nextCredentialsRefresh","_identityIdStore","clearCredentialsAndIdentityId","debug","_credentialsAndIdentityId","undefined","clearIdentityId","clearCredentials","getCredentialsAndIdentityId","getCredentialsOptions","isAuthenticated","authenticated","tokens","authConfig","assertIdentityPoolIdConfig","Cognito","allowGuestAccess","forceRefresh","tokenHasChanged","hasTokenChanged","identityId","cognitoIdentityIdProvider","getGuestCredentials","assertIdTokenInAuthTokens","credsForOIDCTokens","isPastTTL","isAuthenticatedCreds","info","region","getRegionFromIdentityPoolId","identityPoolId","clientResult","getCredentialsForIdentity","IdentityId","e","assertServiceError","AuthError","Credentials","AccessKeyId","SecretKey","Date","getTime","res","credentials","accessKeyId","secretAccessKey","sessionToken","SessionToken","expiration","Expiration","storeIdentityId","id","type","name","message","authTokens","logins","idToken","formLoginsMap","toString","Logins","associatedIdToken","now"],"sources":["/Users/varv/Downloads/wf 4/node_modules/@aws-amplify/auth/src/providers/cognito/credentialsProvider/credentialsProvider.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { ConsoleLogger, getCredentialsForIdentity, } from '@aws-amplify/core';\nimport { assertIdentityPoolIdConfig, } from '@aws-amplify/core/internals/utils';\nimport { AuthError } from '../../../errors/AuthError';\nimport { assertServiceError } from '../../../errors/utils/assertServiceError';\nimport { getRegionFromIdentityPoolId } from '../../../foundation/parsers';\nimport { assertIdTokenInAuthTokens } from '../utils/types';\nimport { cognitoIdentityIdProvider } from './IdentityIdProvider';\nimport { formLoginsMap } from './utils';\nconst logger = new ConsoleLogger('CognitoCredentialsProvider');\nconst CREDENTIALS_TTL = 50 * 60 * 1000; // 50 min, can be modified on config if required in the future\nexport class CognitoAWSCredentialsAndIdentityIdProvider {\n    constructor(identityIdStore) {\n        this._nextCredentialsRefresh = 0;\n        this._identityIdStore = identityIdStore;\n    }\n    async clearCredentialsAndIdentityId() {\n        logger.debug('Clearing out credentials and identityId');\n        this._credentialsAndIdentityId = undefined;\n        await this._identityIdStore.clearIdentityId();\n    }\n    async clearCredentials() {\n        logger.debug('Clearing out in-memory credentials');\n        this._credentialsAndIdentityId = undefined;\n    }\n    async getCredentialsAndIdentityId(getCredentialsOptions) {\n        const isAuthenticated = getCredentialsOptions.authenticated;\n        const { tokens } = getCredentialsOptions;\n        const { authConfig } = getCredentialsOptions;\n        try {\n            assertIdentityPoolIdConfig(authConfig?.Cognito);\n        }\n        catch {\n            // No identity pool configured, skipping\n            return;\n        }\n        if (!isAuthenticated && !authConfig.Cognito.allowGuestAccess) {\n            // TODO(V6): return partial result like Native platforms\n            return;\n        }\n        const { forceRefresh } = getCredentialsOptions;\n        const tokenHasChanged = this.hasTokenChanged(tokens);\n        const identityId = await cognitoIdentityIdProvider({\n            tokens,\n            authConfig: authConfig.Cognito,\n            identityIdStore: this._identityIdStore,\n        });\n        // Clear cached credentials when forceRefresh is true OR the cache token has changed\n        if (forceRefresh || tokenHasChanged) {\n            this.clearCredentials();\n        }\n        if (!isAuthenticated) {\n            return this.getGuestCredentials(identityId, authConfig.Cognito);\n        }\n        else {\n            assertIdTokenInAuthTokens(tokens);\n            return this.credsForOIDCTokens(authConfig.Cognito, tokens, identityId);\n        }\n    }\n    async getGuestCredentials(identityId, authConfig) {\n        // Return existing in-memory cached credentials only if it exists, is not past it's lifetime and is unauthenticated credentials\n        if (this._credentialsAndIdentityId &&\n            !this.isPastTTL() &&\n            this._credentialsAndIdentityId.isAuthenticatedCreds === false) {\n            logger.info('returning stored credentials as they neither past TTL nor expired.');\n            return this._credentialsAndIdentityId;\n        }\n        // Clear to discard if any authenticated credentials are set and start with a clean slate\n        this.clearCredentials();\n        const region = getRegionFromIdentityPoolId(authConfig.identityPoolId);\n        // use identityId to obtain guest credentials\n        // save credentials in-memory\n        // No logins params should be passed for guest creds:\n        // https://docs.aws.amazon.com/cognitoidentity/latest/APIReference/API_GetCredentialsForIdentity.html\n        let clientResult;\n        try {\n            clientResult = await getCredentialsForIdentity({ region }, {\n                IdentityId: identityId,\n            });\n        }\n        catch (e) {\n            assertServiceError(e);\n            throw new AuthError(e);\n        }\n        if (clientResult?.Credentials?.AccessKeyId &&\n            clientResult?.Credentials?.SecretKey) {\n            this._nextCredentialsRefresh = new Date().getTime() + CREDENTIALS_TTL;\n            const res = {\n                credentials: {\n                    accessKeyId: clientResult.Credentials.AccessKeyId,\n                    secretAccessKey: clientResult.Credentials.SecretKey,\n                    sessionToken: clientResult.Credentials.SessionToken,\n                    expiration: clientResult.Credentials.Expiration,\n                },\n                identityId,\n            };\n            if (clientResult.IdentityId) {\n                res.identityId = clientResult.IdentityId;\n                this._identityIdStore.storeIdentityId({\n                    id: clientResult.IdentityId,\n                    type: 'guest',\n                });\n            }\n            this._credentialsAndIdentityId = {\n                ...res,\n                isAuthenticatedCreds: false,\n            };\n            return res;\n        }\n        else {\n            throw new AuthError({\n                name: 'CredentialsNotFoundException',\n                message: `Cognito did not respond with either Credentials, AccessKeyId or SecretKey.`,\n            });\n        }\n    }\n    async credsForOIDCTokens(authConfig, authTokens, identityId) {\n        if (this._credentialsAndIdentityId &&\n            !this.isPastTTL() &&\n            this._credentialsAndIdentityId.isAuthenticatedCreds === true) {\n            logger.debug('returning stored credentials as they neither past TTL nor expired.');\n            return this._credentialsAndIdentityId;\n        }\n        // Clear to discard if any unauthenticated credentials are set and start with a clean slate\n        this.clearCredentials();\n        const logins = authTokens.idToken\n            ? formLoginsMap(authTokens.idToken.toString())\n            : {};\n        const region = getRegionFromIdentityPoolId(authConfig.identityPoolId);\n        let clientResult;\n        try {\n            clientResult = await getCredentialsForIdentity({ region }, {\n                IdentityId: identityId,\n                Logins: logins,\n            });\n        }\n        catch (e) {\n            assertServiceError(e);\n            throw new AuthError(e);\n        }\n        if (clientResult?.Credentials?.AccessKeyId &&\n            clientResult?.Credentials?.SecretKey) {\n            this._nextCredentialsRefresh = new Date().getTime() + CREDENTIALS_TTL;\n            const res = {\n                credentials: {\n                    accessKeyId: clientResult.Credentials.AccessKeyId,\n                    secretAccessKey: clientResult.Credentials.SecretKey,\n                    sessionToken: clientResult.Credentials.SessionToken,\n                    expiration: clientResult.Credentials.Expiration,\n                },\n                identityId,\n            };\n            if (clientResult.IdentityId) {\n                res.identityId = clientResult.IdentityId;\n                // note: the following call removes guest identityId from the persistent store (localStorage)\n                this._identityIdStore.storeIdentityId({\n                    id: clientResult.IdentityId,\n                    type: 'primary',\n                });\n            }\n            // Store the credentials in-memory along with the expiration\n            this._credentialsAndIdentityId = {\n                ...res,\n                isAuthenticatedCreds: true,\n                associatedIdToken: authTokens.idToken?.toString(),\n            };\n            return res;\n        }\n        else {\n            throw new AuthError({\n                name: 'CredentialsException',\n                message: `Cognito did not respond with either Credentials, AccessKeyId or SecretKey.`,\n            });\n        }\n    }\n    isPastTTL() {\n        return this._nextCredentialsRefresh === undefined\n            ? true\n            : this._nextCredentialsRefresh <= Date.now();\n    }\n    hasTokenChanged(tokens) {\n        return (!!tokens &&\n            !!this._credentialsAndIdentityId?.associatedIdToken &&\n            tokens.idToken?.toString() !==\n                this._credentialsAndIdentityId.associatedIdToken);\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}