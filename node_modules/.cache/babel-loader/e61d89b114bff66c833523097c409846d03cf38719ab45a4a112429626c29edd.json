{"ast":null,"code":"import { DEFAULT_RETRY_ATTEMPTS, AMZ_SDK_REQUEST_HEADER } from './constants.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n/**\n * Middleware injects `amz-sdk-request` header to indicate the retry state at the time an HTTP request is made.\n * This middleware should co-exist with retryMiddleware as it relies on the retryAttempts value in middleware context\n * set by the retry middleware.\n *\n * Example header: `amz-sdk-request: attempt=1; max=3`.\n *\n * This middleware is standalone because of extra headers may conflict with custom endpoint settings(e.g. CORS), we will\n * NOT use this middleware for API categories.\n */\nconst amzSdkRequestHeaderMiddlewareFactory = _ref => {\n  let {\n    maxAttempts = DEFAULT_RETRY_ATTEMPTS\n  } = _ref;\n  return (next, context) => {\n    return async function amzSdkRequestHeaderMiddleware(request) {\n      const attemptsCount = context.attemptsCount ?? 0;\n      request.headers[AMZ_SDK_REQUEST_HEADER] = `attempt=${attemptsCount + 1}; max=${maxAttempts}`;\n      return next(request);\n    };\n  };\n};\nexport { amzSdkRequestHeaderMiddlewareFactory };","map":{"version":3,"names":["amzSdkRequestHeaderMiddlewareFactory","_ref","maxAttempts","DEFAULT_RETRY_ATTEMPTS","next","context","amzSdkRequestHeaderMiddleware","request","attemptsCount","headers","AMZ_SDK_REQUEST_HEADER"],"sources":["/Users/varv/Downloads/CONNORR1/node_modules/@aws-amplify/core/src/clients/middleware/retry/amzSdkRequestHeaderMiddleware.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { AMZ_SDK_REQUEST_HEADER, DEFAULT_RETRY_ATTEMPTS } from './constants';\n/**\n * Middleware injects `amz-sdk-request` header to indicate the retry state at the time an HTTP request is made.\n * This middleware should co-exist with retryMiddleware as it relies on the retryAttempts value in middleware context\n * set by the retry middleware.\n *\n * Example header: `amz-sdk-request: attempt=1; max=3`.\n *\n * This middleware is standalone because of extra headers may conflict with custom endpoint settings(e.g. CORS), we will\n * NOT use this middleware for API categories.\n */\nexport const amzSdkRequestHeaderMiddlewareFactory = ({ maxAttempts = DEFAULT_RETRY_ATTEMPTS }) => (next, context) => {\n    return async function amzSdkRequestHeaderMiddleware(request) {\n        const attemptsCount = context.attemptsCount ?? 0;\n        request.headers[AMZ_SDK_REQUEST_HEADER] =\n            `attempt=${attemptsCount + 1}; max=${maxAttempts}`;\n        return next(request);\n    };\n};\n"],"mappings":";;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACY,MAACA,oCAAoC,GAAGC,IAAA;EAAA,IAAC;IAAEC,WAAW,GAAGC;EAAsB,CAAE,GAAAF,IAAA;EAAA,OAAK,CAACG,IAAI,EAAEC,OAAO,KAAK;IACjH,OAAO,eAAeC,6BAA6BA,CAACC,OAAO,EAAE;MACzD,MAAMC,aAAa,GAAGH,OAAO,CAACG,aAAa,IAAI,CAAC;MAChDD,OAAO,CAACE,OAAO,CAACC,sBAAsB,CAAC,GACnC,WAAWF,aAAa,GAAG,CAAC,SAASN,WAAW,EAAE;MACtD,OAAOE,IAAI,CAACG,OAAO,CAAC;IAC5B,CAAK;EACL;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}